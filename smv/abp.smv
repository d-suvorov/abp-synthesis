MODULE main
VAR
  REQ: boolean;
  tmr: timer;
  sndr: sender(REQ, bwdc.o0, bwdc.o1, tmr.timeout);
  fwdc: channel(sndr.p0, sndr.p1);
  rcvr: receiver(fwdc.o0, fwdc.o1);
  bwdc: channel(rcvr.a0, rcvr.a1);
ASSIGN
  REQ := TRUE;

-- Safety
  
-- `send` and `deliver` occur in the right order
LTLSPEC
  -- `deliver` can only happen after `send`
  -- sndr.send R !rcvr.deliver
  !(!sndr.send U rcvr.deliver)
LTLSPEC
  -- two `send`s cannot occur in a row without a `deliver` in between
  G (sndr.send -> X !(!rcvr.deliver U sndr.send))
  
-- `deliver` and `done` occur in the right order
LTLSPEC
  -- `done` can only happen after `deliver`
  -- rcvr.deliver R !sndr.done
  !(!rcvr.deliver U sndr.done)
LTLSPEC
  -- two `deliver`s cannot occur in a row without a `done` in between
  G (rcvr.deliver -> X !(!sndr.done U rcvr.deliver))

MODULE timer
VAR
  timeout: boolean;
ASSIGN
  init(timeout) := FALSE;
  next(timeout) := case
                     !timeout : FALSE union TRUE;
                     timeout : FALSE;
                   esac;
  
MODULE simple_sender
VAR
  p0: boolean;
  p1: boolean;
ASSIGN
  init(p0) := TRUE;
  next(p0) := FALSE union TRUE;

  p1 := !p0;
JUSTICE
  p0;
JUSTICE
  p1;

MODULE sender(REQ, a0, a1, timeout)
VAR
  _state : {s1, s2, s3, s4, s5, s6, s7};
  send : boolean;
  p0 : boolean;
  p1 : boolean;
  done : boolean;
ASSIGN
  init(_state) := s1;
  next(_state) := case
                    _state=s1 & REQ : s2;
                    _state=s2 & REQ : s3;
                    _state=s3 & timeout : s3;
                    _state=s3 & a0 : s4;
                    _state=s4 & REQ : s5;
                    _state=s5 & REQ : s6;
                    _state=s6 & a1 : s7;
                    _state=s6 & timeout : s6;
                    _state=s7 & REQ : s2;
                    TRUE : _state;
                  esac;
                  
  init(send) := FALSE;
  next(send) := case
                  _state=s1 & REQ : TRUE;
                  _state=s4 & REQ : TRUE;
                  _state=s7 & REQ : TRUE;
                  TRUE : FALSE;
                esac;
                
  init(p0) := FALSE;
  next(p0) := case
                _state=s2 & REQ : TRUE;
                _state=s3 & timeout : TRUE;
                TRUE : FALSE;
              esac;
              
  init(p1) := FALSE;
  next(p1) := case
                _state=s5 & REQ : TRUE;
                _state=s6 & timeout : TRUE;
                TRUE : FALSE;
              esac;
              
  init(done) := FALSE;
  next(done) := case
                  _state=s3 & a0 : TRUE;
                  _state=s6 & a1 : TRUE;
                  TRUE : FALSE;
                esac;

MODULE simple_receiver(p0, p1)
VAR
  a0: boolean;
  a1: boolean;
  deliver: boolean;
ASSIGN
  init(a0) := FALSE;
  next(a0) := case
                p0 : TRUE;
                p1 : FALSE;
                TRUE: FALSE;
              esac;

  init(a1) := FALSE;
  next(a1) := case
                p0: FALSE;
                p1: TRUE;
                TRUE: FALSE;
              esac;

  deliver := a0 | a1;

MODULE receiver(p0, p1)
VAR
  state: {s0, s1, s2, s3};
  a0: boolean;
  a1: boolean;
  deliver: boolean;
ASSIGN
  init(state) := s0;
  next(state) := case
                   state = s0 & p0 : s1;
                   state = s0 & p1 : s0;
                   state = s1 & p0 : s2;
                   state = s1 & p1 : s3;
                   state = s2 & p0 : s2;
                   state = s2 & p1 : s3;
                   state = s3 & p0 : s1;
                   state = s3 & p1 : s0;
                   TRUE : state;
                 esac;

  init(a0) := FALSE;
  next(a0) := case
                p0 : TRUE;
                TRUE : FALSE;
              esac;

  init(a1) := FALSE;
  next(a1) := case
                p1 : TRUE;
                TRUE : FALSE;
              esac;

  init(deliver) := FALSE;
  next(deliver) := case
                     state = s0 & p0 : TRUE;
                     state = s1 & p1 : TRUE;
                     state = s2 & p1 : TRUE;
                     state = s3 & p0 : TRUE;
                     TRUE : FALSE;
                   esac;

MODULE channel(i0, i1)
VAR
  state : {empty, stored0, stored1, release0, release1};
  o0 : boolean;
  o1 : boolean;
ASSIGN
  init(state) := empty;
  next(state) := case
                   state = empty & i0 : {empty, stored0};
                   state = empty & i1 : {empty, stored1};
                   state = stored0 : {stored0, release0};
                   state = stored1 : {stored1, release1};
                   state = release0 : empty;
                   state = release1 : empty;
                   TRUE : state;
                 esac;

  init(o0) := FALSE;
  next(o0) := case
                state = stored0 : TRUE;
                state = release0 : FALSE;
                TRUE : o0;
              esac;
              
  init(o1) := FALSE;
  next(o1) := case
                state = stored1 : TRUE;
                state = release1 : FALSE;
                TRUE : o1;
              esac;
JUSTICE
  state = stored0 | state = stored1;