MODULE main
VAR
    timer: Timer;
    client: Client(
        client$done
    );
    sender: Sender(
        sender$REQ,
        sender$send,
        sender$timeout,
        sender$acknowledge,
        sender$input_bit
    );
    receiver: Receiver(
        receiver$REQ,
        receiver$packet,
        receiver$input_bit
    );
    forward: Channel(
        forward$input,
        forward$input_bit
    );
    backward: Channel(
        backward$input,
        backward$input_bit
    );
DEFINE
    -- Client input variables
    client$done := sender.CNF & sender.done;

    -- Sender input variables
    sender$REQ := sender$send | sender$timeout | sender$acknowledge;
    sender$send := client.send;
    sender$timeout := timer.timeout;
    sender$acknowledge := backward.output;
    sender$input_bit := backward.output_bit;

    -- Receiver input variables
    receiver$REQ := receiver$packet;
    receiver$packet := forward.output;
    receiver$input_bit := forward.output_bit;

    -- Forward channel input variables
    forward$input := sender.CNF & sender.packet;
    forward$input_bit := sender.output_bit;

    -- Backward channel input variables
    backward$input := receiver.CNF & receiver.acknowledge;
    backward$input_bit := receiver.output_bit;

    -- LTL spec defines
    ltl_send := client.send;
    ltl_deliver := receiver.CNF & receiver.deliver;
    ltl_done := client.done;

-- Safety

-- `send` and `deliver` occur in the right order
LTLSPEC
    -- `deliver` can only happen after `send`
    -- ltl_send R !ltl_deliver
    !(!ltl_send U ltl_deliver)
LTLSPEC
    -- two `send`s cannot occur in a row without a `deliver` in between
    G (ltl_send -> X !(!ltl_deliver U ltl_send))

-- `deliver` and `done` occur in the right order
LTLSPEC
    -- `done` can only happen after `deliver`
    -- ltl_deliver R !ltl_done
    !(!ltl_deliver U ltl_done)
LTLSPEC
    -- two `deliver`s cannot occur in a row without a `done` in between
    G (ltl_deliver -> X !(!ltl_done U ltl_deliver))

-- FB constraints
LTLSPEC
    G (!next(sender.CNF) -> sender.output_bit = next(sender.output_bit) & sender.packet = next(sender.packet) & sender.done = next(sender.done))

LTLSPEC
    G (!next(receiver.CNF) -> receiver.output_bit = next(receiver.output_bit) & receiver.acknowledge = next(receiver.acknowledge) & receiver.deliver = next(receiver.deliver))
  
-- Liveness

LTLSPEC
    (G F timer.timeout) ->
    (G F (forward.input & forward.input_bit = FALSE) -> G F (forward.output & forward.output_bit = FALSE)) ->
    (G F (forward.input & forward.input_bit = TRUE) -> G F (forward.output & forward.output_bit = TRUE)) ->
    (G F (backward.input & backward.input_bit = FALSE) -> G F (backward.output & backward.output_bit = FALSE)) ->
    (G F (backward.input & backward.input_bit = TRUE) -> G F (backward.output & backward.output_bit = TRUE)) ->
    G (ltl_send -> F ltl_deliver)

LTLSPEC
    (G F timer.timeout) ->
    (G F (forward.input & forward.input_bit = FALSE) -> G F (forward.output & forward.output_bit = FALSE)) ->
    (G F (forward.input & forward.input_bit = TRUE) -> G F (forward.output & forward.output_bit = TRUE)) ->
    (G F (backward.input & backward.input_bit = FALSE) -> G F (backward.output & backward.output_bit = FALSE)) ->
    (G F (backward.input & backward.input_bit = TRUE) -> G F (backward.output & backward.output_bit = TRUE)) ->
    G (ltl_send -> F ltl_done)

LTLSPEC
    (G F timer.timeout) ->
    (G F (forward.input & forward.input_bit = FALSE) -> G F (forward.output & forward.output_bit = FALSE)) ->
    (G F (forward.input & forward.input_bit = TRUE) -> G F (forward.output & forward.output_bit = TRUE)) ->
    (G F (backward.input & backward.input_bit = FALSE) -> G F (backward.output & backward.output_bit = FALSE)) ->
    (G F (backward.input & backward.input_bit = TRUE) -> G F (backward.output & backward.output_bit = TRUE)) ->
    G F ltl_send


MODULE Timer
VAR
    timeout: boolean;
ASSIGN
    init(timeout) := FALSE;
    next(timeout) := case
        !timeout : {FALSE, TRUE};
        timeout : FALSE;
    esac;


MODULE Client(done)
VAR
    _state: {idle, awaiting};
    send: boolean;
    ASSIGN
    init(_state) := idle;
    next(_state) := case
        _state = idle : awaiting;
        _state = awaiting & done: idle;
        TRUE : _state;
    esac;

    init(send) := FALSE;
    next(send) := case
        _state = idle : TRUE;
        TRUE : FALSE;
    esac;


MODULE Sender(REQ, send, timeout, acknowledge, input_bit)
VAR
    _state : {s1, s2, s3, s4};
    done: boolean;
    packet: boolean;
    output_bit: boolean;
    CNF: boolean;
DEFINE
    guard_s1_s2 := _state=s1 & REQ & send;
    guard_s2_s3 := _state=s2 & REQ & acknowledge & !input_bit;
    guard_s2_s2 := _state=s2 & REQ & timeout;
    guard_s3_s4 := _state=s3 & REQ & send;
    guard_s4_s1 := _state=s4 & REQ & acknowledge &  input_bit;
    guard_s4_s4 := _state=s4 & REQ & timeout;
ASSIGN
    init(_state) := s1;
    next(_state) := case
        guard_s1_s2 : s2;
        guard_s2_s3 : s3;
        guard_s2_s2 : s2;
        guard_s3_s4 : s4;
        guard_s4_s1 : s1;
        guard_s4_s4 : s4;
        TRUE : _state;
    esac;

    init(packet) := FALSE;
    next(packet) := case
        guard_s1_s2 : TRUE;
        guard_s2_s3 : FALSE;
        guard_s2_s2 : TRUE;
        guard_s3_s4 : TRUE;
        guard_s4_s1 : FALSE;
        guard_s4_s4 : TRUE;
        TRUE : packet;
    esac;

    init(output_bit) := FALSE;
    next(output_bit) := case
        guard_s2_s3 : !output_bit; -- TRUE
        guard_s4_s1 : !output_bit; -- FALSE
        TRUE : output_bit;
    esac;

    init(done) := FALSE;
    next(done) := case
        guard_s1_s2 : FALSE;
        guard_s2_s3 : TRUE;
        guard_s2_s2 : FALSE;
        guard_s3_s4 : FALSE;
        guard_s4_s1 : TRUE;
        guard_s4_s4 : FALSE;
        TRUE : done;
    esac;

    init(CNF) := FALSE;
    next(CNF) := case
        guard_s1_s2 : TRUE;
        guard_s2_s3 : TRUE;
        guard_s2_s2 : TRUE;
        guard_s3_s4 : TRUE;
        guard_s4_s1 : TRUE;
        guard_s4_s4 : TRUE;
        TRUE : FALSE;
    esac;

MODULE Receiver(REQ, packet, input_bit)
VAR
    _state: {s1, s2, s3, s4};
    deliver: boolean;
    acknowledge: boolean;
    output_bit: boolean;
    CNF: boolean;
DEFINE
    guard_s1_s1 := _state = s1 & REQ & packet &  input_bit;
    guard_s1_s2 := _state = s1 & REQ & packet & !input_bit;
    guard_s2_s4 := _state = s2 & REQ & packet &  input_bit;
    guard_s2_s3 := _state = s2 & REQ & packet & !input_bit;
    guard_s3_s4 := _state = s3 & REQ & packet &  input_bit;
    guard_s3_s3 := _state = s3 & REQ & packet & !input_bit;
    guard_s4_s1 := _state = s4 & REQ & packet &  input_bit;
    guard_s4_s2 := _state = s4 & REQ & packet & !input_bit;
ASSIGN
    init(_state) := s1;
    next(_state) := case
        guard_s1_s1 : s1;
        guard_s1_s2 : s2;
        guard_s2_s4 : s4;
        guard_s2_s3 : s3;
        guard_s3_s4 : s4;
        guard_s3_s3 : s3;
        guard_s4_s1 : s1;
        guard_s4_s2 : s2;
        TRUE : _state;
    esac;

    init(deliver) := FALSE;
    next(deliver) := case
        guard_s1_s1 : FALSE;
        guard_s1_s2 : TRUE;
        guard_s2_s4 : TRUE;
        guard_s2_s3 : FALSE;
        guard_s3_s4 : TRUE;
        guard_s3_s3 : FALSE;
        guard_s4_s1 : FALSE;
        guard_s4_s2 : TRUE;
        TRUE : deliver;
    esac;

    init(acknowledge) := FALSE;
    next(acknowledge) := case
        guard_s1_s1 : TRUE;
        guard_s1_s2 : TRUE;
        guard_s2_s4 : TRUE;
        guard_s2_s3 : TRUE;
        guard_s3_s4 : TRUE;
        guard_s3_s3 : TRUE;
        guard_s4_s1 : TRUE;
        guard_s4_s2 : TRUE;
        TRUE : acknowledge;
    esac;

    init(output_bit) := FALSE;
    next(output_bit) := case
        guard_s1_s1 : TRUE;
        guard_s1_s2 : FALSE;
        guard_s2_s4 : TRUE;
        guard_s2_s3 : FALSE;
        guard_s3_s4 : TRUE;
        guard_s3_s3 : FALSE;
        guard_s4_s1 : TRUE;
        guard_s4_s2 : FALSE;
        TRUE : output_bit;
    esac;

    init(CNF) := FALSE;
    next(CNF) := case
        guard_s1_s1 : TRUE;
        guard_s1_s2 : TRUE;
        guard_s2_s4 : TRUE;
        guard_s2_s3 : TRUE;
        guard_s3_s4 : TRUE;
        guard_s3_s3 : TRUE;
        guard_s4_s1 : TRUE;
        guard_s4_s2 : TRUE;
        TRUE : FALSE;
    esac;


MODULE Channel(input, input_bit)
VAR
    _state : {empty, stored, release};
    output: boolean;
    output_bit: boolean;
ASSIGN
    init(_state) := empty;
    next(_state) := case
        _state = empty & input : {empty, stored};
        _state = stored : {stored, release};
        _state = release : empty;
        TRUE : _state;
    esac;

    init(output) := FALSE;
    next(output) := case
        _state = stored : TRUE;
        _state = release : FALSE;
        TRUE : output;
    esac;

    init(output_bit) := FALSE;
    next(output_bit) := case
        _state = empty & input : input_bit;
        TRUE : output_bit;
    esac;
