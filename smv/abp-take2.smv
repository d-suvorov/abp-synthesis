MODULE main
VAR
  tmr: timer;
  sclt: sending_client(sndr.done);
  sndr: sender(sclt.send, tmr.timeout, bwdc.output, bwdc.output_bit);
  fwdc: channel(sndr.packet, sndr.output_bit);
  rcvr: receiver(fwdc.output, fwdc.output_bit);
  bwdc: channel(rcvr.acknowledge, rcvr.output_bit);

-- Safety

-- `send` and `deliver` occur in the right order
LTLSPEC
  -- `deliver` can only happen after `send`
  -- sclt.send R !rcvr.deliver
  !(!sclt.send U rcvr.deliver)
LTLSPEC
  -- two `send`s cannot occur in a row without a `deliver` in between
  G (sclt.send -> X !(!rcvr.deliver U sclt.send))

MODULE timer
VAR
  timeout: boolean;
ASSIGN
  init(timeout) := FALSE;
  next(timeout) := case
                     !timeout : FALSE union TRUE;
                     timeout : FALSE;
                   esac;

MODULE sending_client(done)
VAR
  _state: {idle, awaiting};
  send: boolean;
ASSIGN
  init(_state) := idle;
  next(_state) := case
                    _state = idle : awaiting;
                    _state = awaiting & done: idle;
                    TRUE : _state;
                  esac;

  init(send) := FALSE;
  next(send) := case
                  _state = idle : TRUE;
                  TRUE : FALSE;
                esac;

MODULE sender(send, timeout, acknowledge, input_bit)
VAR
  _state : {s1, s2, s3, s4};
  done: boolean;
  packet: boolean;
  output_bit: boolean;
ASSIGN
  init(_state) := s1;
  next(_state) := case
                    _state=s1 & send : s2;
                    _state=s2 & acknowledge & !input_bit : s3;
                    _state=s2 & timeout : s2;
                    _state=s3 & send : s4;
                    _state=s4 & acknowledge &  input_bit : s1;
                    _state=s4 & timeout : s4;
                    TRUE : _state;
                  esac;

  init(packet) := FALSE;
  next(packet) := case
                    _state=s1 & send : TRUE;
                    _state=s2 & timeout : TRUE;
                    _state=s3 & send : TRUE;
                    _state=s4 & timeout : TRUE;
                    TRUE : FALSE;
                  esac;

  init(output_bit) := FALSE;
  next(output_bit) := case
                        _state=s2 & acknowledge & !input_bit : !output_bit;
                        _state=s4 & acknowledge &  input_bit : !output_bit;
                        TRUE : output_bit;
                      esac;

  init(done) := FALSE;
  next(done) := case
                  _state=s2 & acknowledge & !input_bit : TRUE;
                  _state=s4 & acknowledge &  input_bit : TRUE;
                  TRUE : FALSE;
                esac;

MODULE receiver(packet, input_bit)
VAR
  _state: {s1, s2, s3, s4};
  deliver: boolean;
  acknowledge: boolean;
  output_bit: boolean;
ASSIGN
  init(_state) := s1;
  next(_state) := case
                    _state = s1 & packet &  input_bit : s1;
                    _state = s1 & packet & !input_bit : s2;
                    _state = s2 & packet &  input_bit : s4;
                    _state = s2 & packet & !input_bit : s3;
                    _state = s3 & packet &  input_bit : s4;
                    _state = s3 & packet & !input_bit : s3;
                    _state = s4 & packet &  input_bit : s1;
                    _state = s4 & packet & !input_bit : s2;
                    TRUE : _state;
                  esac;
                    
  init(deliver) := FALSE;
  next(deliver) := case
                     _state = s1 & packet & !input_bit : TRUE;
                     _state = s2 & packet &  input_bit : TRUE;
                     _state = s3 & packet &  input_bit : TRUE;
                     _state = s4 & packet & !input_bit : TRUE;
                     TRUE : FALSE;
                   esac;
                    
  init(acknowledge) := FALSE;
  next(acknowledge) := case
                         _state = s1 & packet &  input_bit : TRUE;
                         _state = s1 & packet & !input_bit : TRUE;
                         _state = s2 & packet &  input_bit : TRUE;
                         _state = s2 & packet & !input_bit : TRUE;
                         _state = s3 & packet &  input_bit : TRUE;
                         _state = s3 & packet & !input_bit : TRUE;
                         _state = s4 & packet &  input_bit : TRUE;
                         _state = s4 & packet & !input_bit : TRUE;
                         TRUE : FALSE;
                       esac;

  init(output_bit) := FALSE;
  next(output_bit) := case
                        _state = s1 & packet &  input_bit : TRUE;
                        _state = s1 & packet & !input_bit : FALSE;
                        _state = s2 & packet &  input_bit : TRUE;
                        _state = s2 & packet & !input_bit : FALSE;
                        _state = s3 & packet &  input_bit : TRUE;
                        _state = s3 & packet & !input_bit : FALSE;
                        _state = s4 & packet &  input_bit : TRUE;
                        _state = s4 & packet & !input_bit : FALSE;
                        TRUE : output_bit;
                      esac;
  

MODULE channel(input, input_bit)
VAR
  _state : {empty, stored, release};
  output: boolean;
  output_bit: boolean;
ASSIGN
  init(_state) := empty;
  next(_state) := case
                   _state = empty & input : {empty, stored};
                   _state = stored : {stored, release};
                   _state = release : empty;
                   TRUE : _state;
                 esac;

  init(output) := FALSE;
  next(output) := case
                _state = stored : TRUE;
                _state = release : FALSE;
                TRUE : output;
              esac;

  output_bit := input_bit;